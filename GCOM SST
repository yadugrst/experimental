//Setup AOI
var batas = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-101.70390625000005, 60.3099196810893],
          [-101.70390625000005, -56.963726024368164],
          [18.882031249999905, -56.963726024368164],
          [18.882031249999905, 60.3099196810893]]], null, false);

//Set up time filter
var Jan_Mar = ee.ImageCollection('JAXA/GCOM-C/L3/OCEAN/SST/V3')
                .filterDate('2022-01-01', '2022-03-31')
                .map(function(dataset){return dataset.clip(batas)})
                // filter to daytime data only
                .filter(ee.Filter.eq('SATELLITE_DIRECTION', 'D'));
var Apr_Jun = ee.ImageCollection('JAXA/GCOM-C/L3/OCEAN/SST/V3')
                .filterDate('2022-04-01', '2022-06-30')
                .map(function(dataset){return dataset.clip(batas)})
                // filter to daytime data only
                .filter(ee.Filter.eq('SATELLITE_DIRECTION', 'D'));
var Jul_Sept = ee.ImageCollection('JAXA/GCOM-C/L3/OCEAN/SST/V3')
                .filterDate('2022-07-01', '2022-09-30')
                .map(function(dataset){return dataset.clip(batas)})
                // filter to daytime data only
                .filter(ee.Filter.eq('SATELLITE_DIRECTION', 'D'));
var Okt_Des = ee.ImageCollection('JAXA/GCOM-C/L3/OCEAN/SST/V3')
                .filterDate('2022-10-01', '2022-12-31')
                .map(function(dataset){return dataset.clip(batas)})
                // filter to daytime data only
                .filter(ee.Filter.eq('SATELLITE_DIRECTION', 'D'));

// Multiply with slope coefficient and add offset
var dataset1 = Jan_Mar.mean().multiply(0.0012).add(-10);
var dataset2 = Apr_Jun.mean().multiply(0.0012).add(-10);
var dataset3 = Jul_Sept.mean().multiply(0.0012).add(-10);
var dataset4 = Okt_Des.mean().multiply(0.0012).add(-10);

var vis = {
  bands: ['SST_AVE'],
  min: 0,
  max: 30,
  palette: ['000000', '005aff', '43c8c8', 'fff700', 'ff0000'],
};

Map.centerObject(batas,2);
Map.addLayer(dataset1, vis, 'SST Januari Maret');
Map.addLayer(dataset2, vis, 'SST Maret Juni');
Map.addLayer(dataset3, vis, 'SST Juli September');
Map.addLayer(dataset4, vis, 'SST Oktober Desember');

// Creates a color bar thumbnail image for use in legend from the given color
// palette.
function makeColorBarParams(palette) {
  return {
    bbox: [0, 0, 1, 0.1],
    dimensions: '100x10',
    format: 'png',
    min: 0,
    max: 1,
    palette: palette,
  };
}

// Create the color bar for the legend.
var colorBar = ui.Thumbnail({
  image: ee.Image.pixelLonLat().select(0),
  params: makeColorBarParams(vis.palette),
  style: {stretch: 'horizontal', margin: '0px 8px', maxHeight: '24px'},
});

// Create a panel with three numbers for the legend.
var legendLabels = ui.Panel({
  widgets: [
    ui.Label(vis.min, {margin: '4px 8px'}),
    ui.Label(
        (vis.max / 2),
        {margin: '4px 8px', textAlign: 'center', stretch: 'horizontal'}),
    ui.Label(vis.max, {margin: '4px 8px'})
  ],
  layout: ui.Panel.Layout.flow('horizontal')
});

var legendTitle = ui.Label({
  value: 'Sea Surface Temperature (C)',
  style: {fontWeight: 'bold'}
});

// Add the legendPanel to the map.
var legendPanel = ui.Panel([legendTitle, colorBar, legendLabels]);
Map.add(legendPanel);
